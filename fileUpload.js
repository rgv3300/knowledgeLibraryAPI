require('dotenv').config()
const axios = require('axios'),
    ACCESS_TOKEN = process.env.ACCESS_TOKEN


const path = 'https://github.com/rgv3300/knowledgeLibraryAPI/blob/main/mockfiles/'

const dummyFiles = [path+`dummy.pdf`,path+`dummy1.pdf`,path+`dummy2.pdf`,path+`dummy3.pdf`]

const promises = []

const fileIDs = []
//need the file ids to upload the files to the category. We need to input the id generated by the categories
const graphAPI1 = 'https://graph.facebook.com/v12.0/840950839847653'

const graphAPI2 = 'https://graph.facebook.com/v12.0/840950853180985'

for(let i = 0; i < dummyFiles.length; i++) {
    const cfg = {
        method: 'post',
        url : `${graphAPI1}/files?url=${encodeURIComponent(dummyFiles[i])}&name=dummy${encodeURIComponent(i)}&access_token=${ACCESS_TOKEN}`,
        headers:  {
            'Content-Type': 'application/json'
    }
}
    promises.push(axios(cfg))
}

Promise.all(promises).then(results => {
    results.map(result => {
        fileIDs.push(result.data.id)
    })
    console.log(fileIDs)
    
    const payload1 = {
        "json_content":[
            {
		        "type": "resource_section",
		        "name": `dummy`,
		        "children": [{
				    "type": "resource_file",
				    "file_data": {
				    	"id": `${fileIDs[0]}`
				    },
				    "name": `dummy`,
				    "description": "this is a dummy file for demo"
			    },
			    {
				    "type": "resource_link",
				    "href": `${dummyFiles[0]}`,
				    "name": `dummy`,
				    "description": "this is a dummy file for demo"
                }
                ]
            },
            {
		        "type": "resource_section",
		        "name": `dummy1`,
		        "children": [{
				    "type": "resource_file",
				    "file_data": {
					    "id": `${fileIDs[1]}`
				    },
				    "name": `dummy1`,
				    "description": "this is a dummy file for demo"
			    },
			{
				"type": "resource_link",
				"href": dummyFiles[1],
				"name": `dummy1`,
				"description": "this is a dummy file for demo"
            },
            ]
    }
]}
    const cfg1 = {
        method: 'post',
        url : `${graphAPI1}?access_token=${ACCESS_TOKEN}`,
        headers: {
            'Content-Type': 'application/json'
        },
        data: payload1
    }

    const payload2 = {"json_content":[{
            "type": "resource_section",
            "name": `dummy2`,
            "children": [{
                    "type": "resource_file",
                    "file_data": {
                        "id": `${fileIDs[2]}`
                    },
                    "name": `dummy2`,
                    "description": "this is a dummy file for demo"
                },
                {
                    "type": "resource_link",
                    "href": `${dummyFiles[2]}`,
                    "name": `dummy2`,
                    "description": "this is a dummy file for demo"
                }
                
            ]}
        ,
           { "type": "resource_section",
            "name": `dummy3`,
            "children": [{
                    "type": "resource_file",
                    "file_data": {
                        "id": `${fileIDs[3]}`
                    },
                    "name": `dummy3`,
                    "description": "this is a dummy file for demo"
                },
                {
                    "type": "resource_link",
                    "href": dummyFiles[3],
                    "name": `dummy3`,
                    "description": "this is a dummy file for demo"
                },
                
            ]
        }]}
        

        const cfg2 = {
            method: 'post',
            url : `${graphAPI2}?access_token=${ACCESS_TOKEN}`,
            headers: {
                'Content-Type': 'application/json'
            },
            data: payload2
            
    }
    
        return Promise.all([axios(cfg1), axios(cfg2)] )
}).catch((error) => {
    if(error.response) {
        console.log(error.response.data)
        console.log(error.response.status)
        console.log(error.response.headers)
    }
})